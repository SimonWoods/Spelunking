(* ::Package:: *)

(************************************************************************)
(* This file was generated automatically by the Mathematica front end.  *)
(* It contains Initialization cells from a Notebook file, which         *)
(* typically will have the same name as this file except ending in      *)
(* ".nb" instead of ".m".                                               *)
(*                                                                      *)
(* This file is intended to be loaded into the Mathematica kernel using *)
(* the package loading commands Get or Needs.  Doing so is equivalent   *)
(* to using the Evaluate Initialization Cells menu command in the front *)
(* end.                                                                 *)
(*                                                                      *)
(* DO NOT EDIT THIS FILE.  This entire file is regenerated              *)
(* automatically each time the parent Notebook file is saved in the     *)
(* Mathematica front end.  Any changes you make to this file will be    *)
(* overwritten.                                                         *)
(************************************************************************)



(* =======================================
Updated 26 June 2013.

Added "ShowStringCharacters"->True in the output cell so that string literals are more obvious.

Switched from ToBoxes to MakeBoxes in the Definition extraction, this seems to get rid of some of the warnings.

Removed the Catch for warnings generated by the Definition extraction - a few symbols still have invalid box forms in their definition but I haven't seen any significant problems from this. It's probably better to see a slightly corrupted output than none at all.

Added memoization to def[] as it tends to get called multiple times for the same symbol - note that the stored downvalues for def[symbol] are cleared in Spelunk[symbol], this is to allow for symbols changing their definition (e.g. when Autoloaded).

Added the symbol's attributes (if any) to the tooltips.

Added a button to trigger the AutoLoad on symbols defined that way (see e.g. Spelunk[Rasterize] with a fresh kernel)

Generally tidied the code up a bit

ToDo:
Add some comments explaining what the code does!
It would be nice if there was a way to copy the full name of a symbol from the output.

========================================= *)


BeginPackage["Spelunk`"]


Spelunk::usage="Spelunk[symbol]"


Begin["`Private`"]


spelunkcellprint[boxes_]:=CellPrint[Cell[BoxData[boxes], "Output",
Background->RGBColor[1, 0.95, 0.9],
CellGroupingRules->"OutputGrouping",
GeneratedCell->True,CellAutoOverwrite->True,
ShowAutoStyles->True,LanguageCategory->"Mathematica",
FontWeight->"Bold",ShowStringCharacters->True]]


prettyboxes[boxes_]:=boxes/.{" "}->{"\n-----------\n"}//.{RowBox[{left___,";",next:Except["\n"],right___}]:>RowBox[{left,";","\n","\t",next,right}],RowBox[{sc:("Block"|"Module"|"With"),"[",RowBox[{vars_,",",body_}],"]"}]:>RowBox[{sc,"[",RowBox[{vars,",","\n\t",body}],"]"}]}


output=spelunkcellprint @ prettyboxes @ #&;


gbox[args__,"{}"]:=gbox[args]
gbox[args__]:=GridBox[Transpose[{{args}}]]


defboxes[sym_]:=Quiet[MakeBoxes[Definition@sym] /. InterpretationBox[a_, ___] :> a]


mem:def[sym_Symbol] :=mem=Module[{att=Attributes[sym]},
{If[MemberQ[att, Locked], "Null",
Internal`InheritedBlock[{sym},Unprotect[sym]; ClearAttributes[sym, ReadProtected];
defboxes@sym ]],ToString@att}]


def[s_String]:=ToExpression[s,InputForm,def]


SetAttributes[{def,defboxes},HoldFirst]


symbolstringrule=s_String:>First@StringCases[s,{a:(Except["\""]~~___~~"`"~~b__):>processsymbol[a,b],other__:>other}];


processsymbol[full_, shrt_] := Module[{db,att},
  Which[
!StringFreeQ[full, "_"],TooltipBox[shrt, full],
{db,att} = def[full];
db==="Null",TooltipBox[shrt,gbox[full,att]],
True,ButtonBox[TooltipBox[shrt,gbox[full,att]], ButtonFunction:>Spelunk@full,BaseStyle->{},Evaluator->Automatic]]]


Spelunk[symbol_Symbol]:=Module[{outboxes},
If[ValueQ[def[symbol]],def[symbol]=.];
outboxes=First[def[symbol]]/.symbolstringrule;
If[FreeQ[outboxes,"System`Dump`AutoLoad"]||Hold[symbol]===Hold[System`Dump`AutoLoad],
output[outboxes],
output[gbox[MakeBoxes[Button["Autoload this function",(symbol;Spelunk[symbol])]],outboxes]]]]


Spelunk[s_String]:=ToExpression[s,InputForm,Spelunk]


SetAttributes[Spelunk,HoldFirst]


End[]


EndPackage[]
